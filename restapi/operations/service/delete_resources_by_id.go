// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteResourcesByIDHandlerFunc turns a function with the right signature into a delete resources by Id handler
type DeleteResourcesByIDHandlerFunc func(DeleteResourcesByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteResourcesByIDHandlerFunc) Handle(params DeleteResourcesByIDParams) middleware.Responder {
	return fn(params)
}

// DeleteResourcesByIDHandler interface for that can handle valid delete resources by Id params
type DeleteResourcesByIDHandler interface {
	Handle(DeleteResourcesByIDParams) middleware.Responder
}

// NewDeleteResourcesByID creates a new http.Handler for the delete resources by Id operation
func NewDeleteResourcesByID(ctx *middleware.Context, handler DeleteResourcesByIDHandler) *DeleteResourcesByID {
	return &DeleteResourcesByID{Context: ctx, Handler: handler}
}

/* DeleteResourcesByID swagger:route DELETE /{resourceId}/ Service deleteResourcesById

Delete resources

*/
type DeleteResourcesByID struct {
	Context *middleware.Context
	Handler DeleteResourcesByIDHandler
}

func (o *DeleteResourcesByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteResourcesByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
